locals {
  vm_data = { for idx, vm in var.vm_name : vm => {
    hostname    = var.hostname[idx],
    ip_address  = var.network[idx].ip_address,
    netmask     = var.network[idx].netmask,
    gateway     = var.network[idx].gateway,
    nameservers = var.network[idx].nameservers
  }}
}
{% for key in item_keys -%}
{% if key == 'vm_name' -%}
resource "libvirt_cloudinit_disk" "vms" {
    for_each      = toset(var.{{ key }})
    name          = "${each.value}.iso"
    pool          = "vms"
    user_data     = data.template_file.user_data[each.key].rendered
    network_config = data.template_file.network_config[each.key].rendered
}

data "template_file" "network_config" {
    for_each = local.vm_data
    template = file("${path.module}/network.cfg")

    vars = {
        ip_address  = each.value.ip_address
        gateway     = each.value.gateway
        nameservers = join(", ", each.value.nameservers)
    }
}

data "template_file" "user_data" {
    for_each = toset(var.{{ key }})
    template = file("${path.module}/cloudinit.cfg")

    vars = {
	    hostname = each.value
    }

}

resource "libvirt_volume" "k8s-vm-vda" {
    for_each         = toset(var.{{ key }})

    name             = "${each.value}.qcow2"
    pool             = "vms"
    base_volume_name = "template-ubuntu2004.img"
    base_volume_pool = "isos"
    size             = "53687091200"
    format           = "qcow2"
}

resource "libvirt_domain" "vms" {
    for_each    = local.vm_data

    name        = each.value.hostname
    memory      = contains(["k8s-master01", "k8s-master02"], each.value) ? 6192 : 4096
    vcpu        = contains(["k8s-master01", "k8s-master02"], each.value) ? 3 : 2

    cpu {
           mode = "host-passthrough"
    }

    cloudinit = libvirt_cloudinit_disk.vms[each.key].id

    console {
        type        = "pty"
        target_port = "0"
        target_type = "serial"
    }

    console {
        type        = "pty"
        target_port = "1"
        target_type = "virtio"
    }

    network_interface {
        network_name = "kubernetes"
        addresses     = [each.value.ip_address]
    }

    disk {
        volume_id = libvirt_volume.k8s-vm-vda[each.key].id
    }

    video {
        type = "vga"
    }

    graphics {
        type        = "vnc"
        listen_type = "address"
        autoport    = true
    }
}

{% endif -%}
{% endfor -%}